{
  "html": "<p></p><div class=\"markdown-fragment\"><p>This modules provides a <a href=\"https://nextjs.org/\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js</a> application that is deployed on AWS using the <a href=\"https://aws.amazon.com/cloudfront/\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">CloudFront CDN</a> and <a href=\"https://aws.amazon.com/lambda/edge/\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Lambda@Edge</a>.</p></div><p></p>\n<h2 class=\"heading\"><span id=\"configure\"></span><a href=\"#configure\">Configure</a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h2>\n<p></p><div class=\"markdown-fragment\"><p></p><div class=\"markdown-fragment\"><p>The following key properties need to be configured for this module:</p>\n<ul>\n<li><strong>Hosted Zone Domain</strong>: A <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Route 53 hosted zone</a> to which the <em>Primary Website Domain</em> and <em>Redirect Website Domain</em> can be added as records. For instance, a hosted zone domain is <code class=\"inline\">mysite.com</code> will allow adding the primiary domain <code class=\"inline\">mysite.com</code> and the redirect domain <code class=\"inline\">www.mysite.com</code>. Note that this hosted zone must already exist in AWS. Please find instructions of how to set up a hosted zone <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</li>\n<li><strong>Primary Website Domain</strong>: This is the domain your users will use to view the site. For instance, if you configure the domain <code class=\"inline\">mysite.com</code>, users will be able to view your site by opening the URL <code class=\"inline\">https://mysite.com</code>.</li>\n<li><strong>Redirect Website Domain</strong>: This is a domain that will redirect all requests to your <em>Primary Website Domain</em>. For instance, if you configure the domain <code class=\"inline\">www.mysite.com</code> as your redirect domain and <code class=\"inline\">mysite.com</code> as your primiary domain, users will be redirected to <code class=\"inline\">https://mysite.com</code> when they attempt to open the URL <code class=\"inline\">https://www.mysite.com</code>. Note that the <em>Redirect Website Domain</em> must be configured, even if you do not need this functionality.</li>\n<li><strong>Default Cache Duration</strong>: The number of seconds that files will be cached in the AWS content delivery network. Setting this to <code class=\"inline\">120</code> for instance, would mean that, unless otherwise specified, webpages and other resources will be cached for 120 s. In that case, when a new version of a page is deployed, it can take up to 120 s for changes to appear when accessing the deployed version of the application.</li>\n</ul></div><p></p></div><p></p>\n<h2 class=\"heading\"><span id=\"getting-started\"></span><a href=\"#getting-started\">Getting Started</a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h2>\n<p></p><div class=\"markdown-fragment\"><p></p><div class=\"markdown-fragment\"><h4 class=\"heading\"><span id=\"infrastructure-2\"></span><a href=\"#infrastructure-2\"><span id=\"user-content-infrastructure-1\"></span><a href=\"#infrastructure-1\" class=\"relative\"><span id=\"user-content-user-content-infrastructure\"></span></a><a href=\"#infrastructure\" class=\"relative\">Infrastructure</a><span class=\"permalink\">\n  \n    \n    \n  \n</span><span class=\"permalink\">\n  \n    \n    \n  \n</span></a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h4>\n<p>The first thing we recommend to do with a new module is to stand up the infrastructure for the module. For this, find the directory for this module in the <code class=\"inline\">packages/</code> folder and navigate to this folder in the command line. Then identify the name of the deployment you have defined in the Goldstack configuration tool. This can be found in the <code class=\"inline\">packages/[moduleName]/goldstack.json</code> file. Look for the <code class=\"inline\">\"deployments\"</code> property and there for the <code class=\"inline\">\"name\"</code> of the first deployment. The name should either be <code class=\"inline\">dev</code> or <code class=\"inline\">prod</code>.</p>\n<p>In order to stand up the infrastructure, now run in the command line:</p>\n<pre><code>yarn infra up [deploymentName]\n</code></pre>\n<p>So it will be either <code class=\"inline\">yarn infra up dev</code> or <code class=\"inline\">yarn infra up prod</code>. Note that running this command can often take a while.</p></div><p></p>\n<p></p><div class=\"markdown-fragment\"><h4 class=\"heading\"><span id=\"deployment-2\"></span><a href=\"#deployment-2\"><span id=\"user-content-deployment-1\"></span><a href=\"#deployment-1\" class=\"relative\"><span id=\"user-content-user-content-deployment\"></span></a><a href=\"#deployment\" class=\"relative\">Deployment</a><span class=\"permalink\">\n  \n    \n    \n  \n</span><span class=\"permalink\">\n  \n    \n    \n  \n</span></a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h4>\n<p>When the infrastructure was successfully, we can deploy the module. For this, simply run the following command:</p>\n<pre><code>yarn deploy [deploymentName]\n</code></pre>\n<p>So it will be either <code class=\"inline\">yarn deploy dev</code> or <code class=\"inline\">yarn deploy prod</code>.</p></div><p></p>\n<p></p><div class=\"markdown-fragment\"><h4 class=\"heading\"><span id=\"development-2\"></span><a href=\"#development-2\"><span id=\"user-content-development-1\"></span><a href=\"#development-1\" class=\"relative\"><span id=\"user-content-user-content-development\"></span></a><a href=\"#development\" class=\"relative\">Development</a><span class=\"permalink\">\n  \n    \n    \n  \n</span><span class=\"permalink\">\n  \n    \n    \n  \n</span></a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h4>\n<p>This module provides a standard Next.js template. Please see the <a href=\"https://nextjs.org/docs/basic-features/pages\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js documentation</a> for details on how to develop a Next.js application. Generally, the folder <code class=\"inline\">src/pages</code> presents a good starting point.</p></div><p></p></div><p></p>\n<h2 class=\"heading\"><span id=\"infrastructure-3\"></span><a href=\"#infrastructure-3\">Infrastructure</a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h2>\n<p></p><div class=\"markdown-fragment\"><p>All infrastructure for this module is defined in Terraform. You can find the Terraform files for this module in the directory <code class=\"inline\">[moduleDir]/infra/aws</code>. You can define multiple deployments for this module, for instance for deployment into a development, test and production system. The deployments and their respective configurations are defined in <code class=\"inline\">[moduleDir]/goldstack.json</code>. When using the Goldstack configuration tool, there will be one deployment defined that is either <code class=\"inline\">dev</code> or <code class=\"inline\">prod</code> depending on whether you choose to define your initial infrastructure for a development or production system.</p>\n<h3 class=\"heading\"><span id=\"infrastructure-commands-1\"></span><a href=\"#infrastructure-commands-1\"><span id=\"user-content-infrastructure-commands\"></span><a href=\"#infrastructure-commands\" class=\"relative\">Infrastructure Commands</a><span class=\"permalink\">\n  \n    \n    \n  \n</span></a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h3>\n<p>There are a number of package scripts defined for working with infrastructure. For all infrastructure scripts, we will need to define which deployment they should apply to for. This is done by referencing the deployment name as configured in <code class=\"inline\">goldstack.json</code>. The following commands are supported:</p>\n<pre><code>yarn infra up [deploymentName]\n</code></pre>\n<p>Which will run the commands <code class=\"inline\">init</code>, <code class=\"inline\">plan</code> and <code class=\"inline\">apply</code> to stand up the infrastructure in the specified destination. If you are new to Terraform, running <code class=\"inline\">yarn infra up</code> is the easiest way to get your infrastructure up and running.</p>\n<p>However, if you are familiar with Terraform and want more fine-grained control over the deployment of your infrastructure, the following commands are also supported:</p>\n<pre><code>yarn infra init [deploymentName]\n</code></pre>\n<p>Which will run <code class=\"inline\">terraform init</code> to initialise the deployment.</p>\n<pre><code>yarn infra plan [deploymentName]\n</code></pre>\n<p>Which will run <code class=\"inline\">terraform plan</code> and show the delta for the infrastructure.</p>\n<pre><code>yarn infra apply [deploymentName]\n</code></pre>\n<p>Which will run <code class=\"inline\">terraform apply</code> and deploy the infrastructure. This requires <code class=\"inline\">yarn infra plan</code> to have run successfully before.</p>\n<pre><code>yarn infra destroy [deploymentName]\n</code></pre>\n<p>Which will run <code class=\"inline\">terraform destroy</code> and <strong>destroy</strong> all your infrastructure. Note that this will lead to loss of all the data you may be storing in datastores for this deployment, so do use this command with caution.</p>\n<h3 class=\"heading\"><span id=\"customizing-terraform-1\"></span><a href=\"#customizing-terraform-1\"><span id=\"user-content-customizing-terraform\"></span><a href=\"#customizing-terraform\" class=\"relative\">Customizing Terraform</a><span class=\"permalink\">\n  \n    \n    \n  \n</span></a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h3>\n<p>Goldstack is made to make it very easy to customize the infrastructure to your specific needs. The easiest way to do this is to simply edit the <code class=\"inline\">*.tf</code> files in the <code class=\"inline\">infra/aws</code> folder. You can make the changes you need and then run <code class=\"inline\">yarn infra up [deploymentName]</code> to apply the changes.</p>\n<p>The <code class=\"inline\">infra/aws</code> folder contains a file <code class=\"inline\">variables.tf</code> that contains the variables required for your deployment; for instance the domain name for a website. The values for these variables are defined in the module's <code class=\"inline\">goldstack.json</code> file in the <code class=\"inline\">\"configuration\"</code> property. There is one global <code class=\"inline\">configuration</code> property that applies for all deployments and each deployment also has their own <code class=\"inline\">configuration</code> property. In order to add a new variable, add this variable to <code class=\"inline\">variables.tf</code> and then add it to the configuration for your module or to the configurations for the deployments.</p>\n<p>Note that due to JavaScript and Terraform using different conventions for naming variables, Goldstack applies a basic transformation to variable names. Camel-case variables names are converted in valid variables names for terraform by replacing every instance of a capital letter <code class=\"inline\">C</code> with <code class=\"inline\">_c</code> in the variable name. For instance:</p>\n<p><code class=\"inline\">myVariableName</code> in the Goldstack configuration will translate to the Terraform variable <code class=\"inline\">my_variable_name</code> as defined in <code class=\"inline\">variables.tf</code>.</p>\n<h3 class=\"heading\"><span id=\"terraform-state-1\"></span><a href=\"#terraform-state-1\"><span id=\"user-content-terraform-state\"></span><a href=\"#terraform-state\" class=\"relative\">Terraform State</a><span class=\"permalink\">\n  \n    \n    \n  \n</span></a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h3>\n<p>In order to manage your infrastructure, Terraform maintains a state for each deployment - to be able to calculate required changes when the infrastructure is updated and also to enable to destroy the infrastructure easily if it is no longer required. Goldstack by default will store the terraform state in the <code class=\"inline\">infra/aws</code> folder as simple files.</p>\n<p>This works well for deploying infrastructure from your local development environment but is not a good choice when building a CI/CD pipeline for the infrastructure definition. In that case, it is better to define <a href=\"https://www.terraform.io/docs/state/remote.html\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Remote State</a>. A popular choice many projects adopt here is to store the <a href=\"https://www.terraform.io/docs/backends/types/s3.html\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">state in an S3 bucket</a>. Please see the Terraform documentation for further details.</p></div><p></p>\n<h2 class=\"heading\"><span id=\"deployment-3\"></span><a href=\"#deployment-3\">Deployment</a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h2>\n<p></p><div class=\"markdown-fragment\"><p>This module can be packaged up and deployed to the deployments specified in <code class=\"inline\">goldstack.json</code>. Note that deployment will only work <em>after</em> the infrastructure for the respective deployment has been stood up. To deploy your module, run the following script:</p>\n<pre><code>yarn deploy [deploymentName]\n</code></pre></div><p></p>\n<h2 class=\"heading\"><span id=\"limitations\"></span><a href=\"#limitations\">Limitations</a><span class=\"permalink\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n  <g stroke-width=\"1\" fill=\"#000000\" stroke=\"#000000\">\n    <path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M8.995,7.005 L8.995,7.005c1.374,1.374,1.374,3.601,0,4.975l-1.99,1.99c-1.374,1.374-3.601,1.374-4.975,0l0,0c-1.374-1.374-1.374-3.601,0-4.975 l1.748-1.698\"></path>\n    <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M7.005,8.995 L7.005,8.995c-1.374-1.374-1.374-3.601,0-4.975l1.99-1.99c1.374-1.374,3.601-1.374,4.975,0l0,0c1.374,1.374,1.374,3.601,0,4.975 l-1.748,1.698\"></path>\n  </g>\n</svg></span></h2>\n<p></p><div class=\"markdown-fragment\"><p>This module enables deploying Next.js applications to a serverless AWS infrastructure. The advantage of this is that you get a very low cost, highly scalable and enterprise ready deployment for the Next.js application. However, serverless AWS infrastructure is structurally different to deployments on Vercel or deployments as stand alone Node.js applications. Thus there are a couple of limitations to keep in mind when working with this template:</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/api-routes/introduction\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">API Routes</a> are not supported. If you need a backend, we recommend adding our <a href=\"./../lambda-express\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Lambda Express</a> template to your project.</li>\n<li>Pre-fetching does not work in some situations, for instance when statically rendering pages using <code class=\"inline\">getStaticPaths</code>. As a workaround, we recommend not using <a href=\"https://nextjs.org/docs/api-reference/next/link\" class=\"absolute\" target=\"_blank\" rel=\"noopener noreferrer\">Link</a> components for these routes and instead use vanilla <code class=\"inline\">a</code> elements.</li>\n</ul>\n<p>There may be other issues in various edge scenarios. If you come across these, <a href=\"\">raise an issue</a> or contact support.</p></div><p></p>",
  "data": {
    "id": "template-app-nextjs",
    "title": "Next.js"
  }
}
