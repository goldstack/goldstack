#cloud-config
users:
  - name: goldstack
    groups: users, admin
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys: []
package_update: true
package_upgrade: true
packages:
  - fail2ban
  - ufw
  - curl
  - jq
  - unzip
  - docker.io
  - docker-compose

write_files:
  - path: /home/goldstack/deploy.sh
    permissions: '0755'
    content: |
      #!/bin/bash

      # Exit on error, but allow for controlled error handling
      set -o pipefail

      # Configuration
      APP_DIR="/home/goldstack/app"
      ZIP_FILE="/home/goldstack/server.zip"
      BACKUP_DIR="/home/goldstack/app_backup"
      SECRETS_DIR="$APP_DIR/secrets"
      CREDENTIALS_FILE="/home/goldstack/credentials.json"
      FIRST_DEPLOY_MARKER_FILE="/home/goldstack/.first_deploy"
      ENV_FILE="/home/goldstack/app/.env"
      LOG_FILE="/home/goldstack/deploy.log"

      # Logging function
      log() {
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] $1" | tee -a "$LOG_FILE"
      }

      # Error handling function
      handle_error() {
        local exit_code=$1
        local error_message=$2
        
        log "ERROR: $error_message (Exit code: $exit_code)"
        
        # If we have a backup and this isn't the first deploy, restore from backup
        if [ -d "$BACKUP_DIR" ] && [ -f "$FIRST_DEPLOY_MARKER_FILE" ]; then
          log "Restoring from backup..."
          rm -rf "$APP_DIR"/*
          cp -r "$BACKUP_DIR"/* "$APP_DIR"/
          
          # Restart the app
          if [ -f "$APP_DIR/start.sh" ]; then
            log "Restarting the app from backup..."
            chmod +x "$APP_DIR/start.sh"
            sudo "$APP_DIR/start.sh"
          fi
        fi
        
        exit $exit_code
      }

      # Validate ZIP file
      validate_zip() {
        if [ ! -f "$ZIP_FILE" ]; then
          handle_error 1 "ZIP file not found: $ZIP_FILE"
        fi
        
        # Check if the ZIP file is valid
        if ! unzip -t "$ZIP_FILE" > /dev/null 2>&1; then
          handle_error 2 "Invalid ZIP file: $ZIP_FILE"
        fi
        
        # Check for required files in the ZIP
        if ! unzip -l "$ZIP_FILE" | grep -q "start.sh"; then
          unzip -l "$ZIP_FILE"
          handle_error 3 "ZIP file missing required file: start.sh"
        fi
      }

      # Start deployment process
      log "Starting deployment process"

      # Create app directory if it doesn't exist
      if [ ! -d "$APP_DIR" ]; then
        log "Creating app directory: $APP_DIR"
        mkdir -p "$APP_DIR"
      fi

      cd "$APP_DIR" || handle_error 4 "Failed to change directory to $APP_DIR"

      # Validate the ZIP file
      validate_zip

      if [ ! -f "$FIRST_DEPLOY_MARKER_FILE" ]; then
        log "First deployment detected"
        
        log "Unzipping the file..."
        if ! unzip -o "$ZIP_FILE" -d "$APP_DIR"; then
          handle_error 5 "Failed to unzip file"
        fi
        
        # Source environment variables if available
        if [ -f "$ENV_FILE" ]; then
          log "Sourcing environment variables"
          source "$ENV_FILE" || handle_error 6 "Failed to source environment variables"
        fi
        
        # Source secrets if available
        if [ -f "$APP_DIR/load-secrets.sh" ]; then
          log "Loading secrets"
          source "$APP_DIR/load-secrets.sh" || handle_error 7 "Failed to load secrets"
        else
          handle_error 8 "Missing load-secrets.sh file"
        fi
        
        log "Running initialization script"
        if [ -f "$APP_DIR/init.sh" ]; then
          chmod +x "$APP_DIR/init.sh"
          sudo "$APP_DIR/init.sh" || handle_error 9 "Initialization failed"
        else
          handle_error 10 "Missing init.sh file"
        fi
        
        touch "$FIRST_DEPLOY_MARKER_FILE"
        log "First deployment completed successfully"
      else
        log "Subsequent deployment detected"
        
        # Step 1: Stop the app by running stop.sh
        if [ -f "$APP_DIR/stop.sh" ]; then
          log "Stopping the app..."
          chmod +x "$APP_DIR/stop.sh"
          if ! sudo "$APP_DIR/stop.sh"; then
            handle_error 11 "Failed to stop the app"
          fi
        else
          log "Warning: stop.sh not found, proceeding anyway"
        fi
        
        # Step 2: Create backup of existing app
        log "Creating backup of existing app..."
        rm -rf "$BACKUP_DIR"
        mkdir -p "$BACKUP_DIR"
        cp -r "$APP_DIR"/* "$BACKUP_DIR"/ || handle_error 12 "Failed to create backup"
        
        # Step 3: Delete the existing app contents
        log "Deleting old app contents..."
        rm -rf "$APP_DIR"/* || handle_error 13 "Failed to delete old app contents"
        
        # Step 4: Unzip the uploaded file to the app folder
        log "Unzipping the file..."
        if ! unzip -o "$ZIP_FILE" -d "$APP_DIR"; then
          handle_error 14 "Failed to unzip file"
        fi
        
        # Validate unzipped content
        if [ ! -f "$APP_DIR/start.sh" ]; then
          handle_error 15 "Missing start.sh in unzipped content"
        fi
        
        # Source environment variables if available
        if [ -f "$ENV_FILE" ]; then
          log "Sourcing environment variables"
          source "$ENV_FILE" || handle_error 16 "Failed to source environment variables"
        fi
        
        # Source secrets if available
        if [ -f "$APP_DIR/load-secrets.sh" ]; then
          log "Loading secrets"
          source "$APP_DIR/load-secrets.sh" || handle_error 17 "Failed to load secrets"
        else
          handle_error 18 "Missing load-secrets.sh file"
        fi
      fi

      # Step 5: Start the app by running start.sh
      if [ -f "$APP_DIR/start.sh" ]; then
        log "Starting the app..."
        chmod +x "$APP_DIR/start.sh"
        if ! sudo "$APP_DIR/start.sh"; then
          handle_error 19 "Failed to start the app"
        fi
      else
        handle_error 20 "Missing start.sh file"
      fi

      log "Deployment completed successfully"

# Ensure the /home/goldstack directory and /home/goldstack/current file exist
runcmd:
  -  #
  -  # Server hardening, see https://community.hetzner.com/tutorials/basic-cloud-config
  -  #
  - printf "[sshd]\nenabled = true\nbanaction = iptables-multiport" > /etc/fail2ban/jail.local
  - systemctl enable fail2ban
  - ufw allow OpenSSH
  - ufw allow http
  - ufw allow https
  - ufw --force enable
  - sed -i -e '/^\(#\|\)PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)PasswordAuthentication/s/^.*$/PasswordAuthentication no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)KbdInteractiveAuthentication/s/^.*$/KbdInteractiveAuthentication no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)ChallengeResponseAuthentication/s/^.*$/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)MaxAuthTries/s/^.*$/MaxAuthTries 2/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)AllowTcpForwarding/s/^.*$/AllowTcpForwarding no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)X11Forwarding/s/^.*$/X11Forwarding no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)AllowAgentForwarding/s/^.*$/AllowAgentForwarding no/' /etc/ssh/sshd_config
  - sed -i -e '/^\(#\|\)AuthorizedKeysFile/s/^.*$/AuthorizedKeysFile .ssh\/authorized_keys/' /etc/ssh/sshd_config
  - sed -i '$a AllowUsers goldstack' /etc/ssh/sshd_config
  - echo 'goldstack ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/goldstack
  - sudo chmod 440 /etc/sudoers.d/goldstack
  -  #
  -  # Ensure the newly setup user uses the SSH key passed using server creation
  -  #
  - mkdir -p /home/goldstack
  - mkdir -p /home/goldstack/app
  - cp /root/.ssh/authorized_keys /home/goldstack/.ssh/authorized_keys
  - chown -R goldstack:goldstack /home/goldstack/.ssh
  - chmod 700 /home/goldstack/.ssh
  - chmod 600 /home/goldstack/.ssh/authorized_keys
  - chown -R  goldstack:goldstack /home/goldstack
  - chown goldstack:goldstack /home/goldstack/deploy.sh
  - systemctl start docker # Start Docker
  - systemctl enable docker # Enable Docker to run on boot
  - docker --version # Check Docker installation
  - reboot
